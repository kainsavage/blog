diff --git a/app/api/post/route.ts b/app/api/post/route.ts
index 04640aa..8ec8e72 100644
--- a/app/api/post/route.ts
+++ b/app/api/post/route.ts
@@ -8,23 +8,9 @@ export async function POST(request: NextRequest) {
     return Response.json({ error: 'Unauthorized' }, { status: 401 });
   }
 
-  const title = '',
-    body = '',
-    synopsis = '',
-    tags = '',
-    hero_url = '',
-    blurred_hero_data_url = '';
-
   let id;
   try {
-    id = await db.createPost(
-      title,
-      body,
-      synopsis,
-      tags,
-      hero_url,
-      blurred_hero_data_url,
-    );
+    id = await db.createPost();
   } catch (e) {
     console.error(e);
     return Response.json({ error: 'Failed to create post' }, { status: 500 });
@@ -39,18 +25,25 @@ export async function PUT(request: NextRequest) {
     return Response.json({ error: 'Unauthorized' }, { status: 401 });
   }
 
-  const { id, title, body, synopsis, tags, hero_url, blurred_hero_data_url } =
-    await request.json();
+  const {
+    id,
+    draft_title,
+    draft_body,
+    draft_synopsis,
+    draft_tags,
+    draft_hero_url,
+    draft_blurred_hero_data_url,
+  } = await request.json();
 
   try {
     await db.editPost(
       parseInt(id, 10),
-      title,
-      body,
-      synopsis,
-      tags,
-      hero_url,
-      blurred_hero_data_url,
+      draft_title,
+      draft_body,
+      draft_synopsis,
+      draft_tags,
+      draft_hero_url,
+      draft_blurred_hero_data_url,
     );
   } catch (e) {
     console.error(e);
diff --git a/app/archive/components/PostCard.tsx b/app/archive/components/PostCard.tsx
index 4e7ae90..c9cfa33 100644
--- a/app/archive/components/PostCard.tsx
+++ b/app/archive/components/PostCard.tsx
@@ -6,6 +6,7 @@ import PostedDate from '@/components/PostedDate';
 import { Pill } from '@mantine/core';
 import { useRouter } from 'next/navigation';
 import { getHeroThumbnailUrl } from '@/helpers/images';
+import { getPostStateColor } from '@/helpers/post';
 
 interface PostCardProps {
   post: Post;
@@ -15,33 +16,48 @@ interface PostCardProps {
 export default function PostCard(props: PostCardProps) {
   const router = useRouter();
 
+  const border = getPostStateColor(props.post);
+
+  const { id } = props.post;
+  let { title, hero_url, synopsis, tags } = props.post;
+  if (props.post.is_draft) {
+    title = props.post.draft_title;
+    hero_url = props.post.draft_hero_url;
+    synopsis = props.post.draft_synopsis;
+    tags = props.post.draft_tags;
+  }
+
+  const route = props.post.is_draft
+    ? `/post/edit/?id=${id}`
+    : `/post/${slugs.slugify(title)}`;
+
   return (
     <div
-      className={`z-[120] shadow-2xl shadow-gray-950 transition ease-in-out hover:md:scale-105 rounded-lg border-y-2 border-transparent ${props.className}`}
+      className={`z-[120] shadow-2xl shadow-gray-950 transition ease-in-out hover:md:scale-105 rounded-lg border-y-2 ${border} ${props.className}`}
     >
       <div
         className="md:max-w-[320px] cursor-pointer"
-        onClick={() => router.push(`/post/${slugs.slugify(props.post.title)}`)}
+        onClick={() => router.push(route)}
       >
         <div className="rounded-t-lg border-t-2 border-transparent min-w-full h-[205px] md:h-[140px] overflow-hidden">
           <img
-            src={getHeroThumbnailUrl(props.post.hero_url, true)}
-            alt={`${props.post.title} thumbnail`}
+            src={getHeroThumbnailUrl(hero_url, true)}
+            alt={`${title} thumbnail`}
             className="object-center object-cover"
           />
         </div>
         <div className="flex flex-col gap-2 p-4">
           <div className="flex flex-row justify-between">
             <h3 className="text-[1.5rem] font-extrabold text-left cursor-pointer">
-              {props.post.title}
+              {title}
             </h3>
           </div>
           <div className="italic text-sm">
             <PostedDate post={props.post} showUpdated={false} />
           </div>
-          <div className="pb-2">{props.post.synopsis}</div>
+          <div className="pb-2">{synopsis}</div>
           <div className="flex flex-row gap-2 flex-wrap">
-            {props.post.tags.split(',').map((tag) => (
+            {tags.split(',').map((tag) => (
               <Pill
                 key={tag}
                 disabled
diff --git a/app/archive/page.tsx b/app/archive/page.tsx
index 49fe2ca..85cfcea 100644
--- a/app/archive/page.tsx
+++ b/app/archive/page.tsx
@@ -1,6 +1,7 @@
 import db from '@/helpers/db';
 import PostCard from '@/app/archive/components/PostCard';
 import { Metadata } from 'next';
+import { getServerSession } from 'next-auth';
 
 export const metadata: Metadata = {
   title: 'Archive | Teamclerks',
@@ -10,7 +11,8 @@ export const dynamic = 'force-dynamic';
 export const revalidate = 0;
 
 export default async function Archive() {
-  const posts = await db.getAllPosts();
+  const session = await getServerSession();
+  const posts = await db.getAllPosts(!session || !session.user);
 
   return (
     <div className="grid md:grid-cols-3 gap-8">
diff --git a/components/EditPost.tsx b/components/EditPost.tsx
index 961cbd1..e591a65 100644
--- a/components/EditPost.tsx
+++ b/components/EditPost.tsx
@@ -4,7 +4,7 @@ import { Post } from '@/helpers/db';
 import { useForm } from '@mantine/form';
 import { Button, Container, Switch, Textarea, TextInput } from '@mantine/core';
 import { md2html } from '@/helpers/markdown';
-import { ChangeEvent, useCallback, useRef, useState } from 'react';
+import { ChangeEvent, useCallback, useEffect, useRef, useState } from 'react';
 import BlogPost from '@/components/BlogPost';
 import { fq } from '@/helpers/fetch';
 import { notifications } from '@mantine/notifications';
@@ -12,27 +12,39 @@ import slugs from '@/helpers/slugs';
 import { useRouter } from 'next/navigation';
 import { useDropzone } from 'react-dropzone';
 import { convertUrlStringToFile, drawThumbnail } from '@/helpers/images';
+import { useDebounceCallback } from '@mantine/hooks';
+import { getPostState, getPostStateColor } from '@/helpers/post';
 
 interface EditPostProps {
   post: Post;
 }
 
 /**
- * Technically, this component is create/edit post based on whether you pass an existing post to
- * it or not.
+ * Edit post page.
+ *
+ * This component also handles whether the post is published or not. 'Published' is sort of a
+ * tri-state situation. If the post is published, it will be visible to everyone. If the post is
+ * saved but not published, then it is a draft and will only be visible to the author. If the post
+ * is published and then unpublished, it will be visible to the author but not to anyone else.
+ * Edits to a published post will not be visible until the post is published again. So, a post can
+ * exist the published state, but have unpublished edits.
  */
 export default function EditPost({ post }: EditPostProps) {
   const router = useRouter();
   const form = useForm({
     initialValues: {
-      title: post ? post.title : '',
-      body: post ? post.body : '',
-      synopsis: post ? post.synopsis : '',
-      tags: post ? post.tags : '',
-      hero_url: post ? post.hero_url : '',
-      blurred_hero_data_url: post ? post.blurred_hero_data_url : '',
+      title: post ? post.draft_title : '',
+      body: post ? post.draft_body : '',
+      synopsis: post ? post.draft_synopsis : '',
+      tags: post ? post.draft_tags : '',
+      hero_url: post ? post.draft_hero_url : '',
+      blurred_hero_data_url: post ? post.draft_blurred_hero_data_url : '',
     },
   });
+  const [canPublish, setCanPublish] = useState(false);
+  const [border, setBorder] = useState(
+    getPostStateColor(post, form.isDirty(), true),
+  );
   const [preview, setPreview] = useState('');
   const [checked, setChecked] = useState(false);
   const imageRef = useRef<HTMLInputElement>(null);
@@ -54,6 +66,36 @@ export default function EditPost({ post }: EditPostProps) {
     noClick: true,
   });
 
+  useEffect(() => {
+    const state = getPostState(post, form.isDirty());
+    setCanPublish(state !== 'Dirty');
+    setBorder(getPostStateColor(post, form.isDirty(), true));
+  }, [form.isDirty()]);
+
+  // Add debounced auto-save feature to every input that has a draft associated with it.
+  const debouncedSavePost = useDebounceCallback(savePost, 5000);
+  useEffect(() => {
+    if (form.values.hero_url === post.hero_url) return;
+    // Note: this should, in theory, also save for the blurred hero data URL.
+    debouncedSavePost();
+  }, [form.values.title]);
+  useEffect(() => {
+    if (form.values.title === post.draft_title) return;
+    debouncedSavePost();
+  }, [form.values.title]);
+  useEffect(() => {
+    if (form.values.synopsis === post.draft_synopsis) return;
+    debouncedSavePost();
+  }, [form.values.synopsis]);
+  useEffect(() => {
+    if (form.values.tags === post.draft_tags) return;
+    debouncedSavePost();
+  }, [form.values.tags]);
+  useEffect(() => {
+    if (form.values.body === post.draft_body) return;
+    debouncedSavePost();
+  }, [form.values.body]);
+
   async function publishPost() {
     const loading = notifications.show({
       title: 'Publishing post',
@@ -95,8 +137,7 @@ export default function EditPost({ post }: EditPostProps) {
 
   async function savePost() {
     const loading = notifications.show({
-      title: 'Saving post',
-      message: 'Please wait...',
+      message: 'Saving post...',
       autoClose: false,
       loading: true,
     });
@@ -107,13 +148,13 @@ export default function EditPost({ post }: EditPostProps) {
         'Content-Type': 'application/json',
       },
       body: JSON.stringify({
-        id: post.id === -1 ? undefined : post.id,
-        title: form.values.title,
-        body: form.values.body,
-        synopsis: form.values.synopsis,
-        tags: form.values.tags,
-        hero_url: form.values.hero_url,
-        blurred_hero_data_url: form.values.blurred_hero_data_url,
+        id: post.id,
+        draft_title: form.values.title,
+        draft_body: form.values.body,
+        draft_synopsis: form.values.synopsis,
+        draft_tags: form.values.tags,
+        draft_hero_url: form.values.hero_url,
+        draft_blurred_hero_data_url: form.values.blurred_hero_data_url,
       }),
     });
     notifications.hide(loading);
@@ -129,13 +170,10 @@ export default function EditPost({ post }: EditPostProps) {
     }
 
     notifications.show({
-      title: 'Post saved',
-      message: 'Redirecting to edited post...',
+      message: 'Post saved!',
       autoClose: 1000,
-      onClose: () => {
-        router.push(fq`/post/${slugs.slugify(form.values.title)}`);
-      },
     });
+    form.resetDirty();
   }
 
   async function upload_image(file: Blob): Promise<string> {
@@ -211,7 +249,7 @@ export default function EditPost({ post }: EditPostProps) {
   }
 
   return (
-    <div className="md:w-[1008px]">
+    <div className={`md:w-[1008px] md:p-4 border-2 ${border}`}>
       <h1 className="text-xl md:text-3xl text-center py-4 px-2">Edit Post</h1>
       <Switch checked={checked} onChange={togglePreview} label="Preview" />
       {!checked ? (
@@ -247,10 +285,7 @@ export default function EditPost({ post }: EditPostProps) {
             />
           </form>
           <Container mt="xl" className="flex flex-row gap-8">
-            <Button fullWidth onClick={savePost} variant="light">
-              Save
-            </Button>
-            <Button fullWidth onClick={publishPost}>
+            <Button fullWidth onClick={publishPost} disabled={!canPublish}>
               Publish
             </Button>
           </Container>
diff --git a/helpers/db.ts b/helpers/db.ts
index ecc9d64..a99df7a 100644
--- a/helpers/db.ts
+++ b/helpers/db.ts
@@ -4,11 +4,17 @@ import { sql } from '@vercel/postgres';
 
 export type Post = {
   id: number;
+  draft_title: string;
   title: string;
+  draft_body: string;
   body: string;
+  draft_synopsis: string;
   synopsis: string;
+  draft_tags: string;
   tags: string;
+  draft_hero_url: string;
   hero_url: string;
+  draft_blurred_hero_data_url?: string;
   blurred_hero_data_url?: string;
   created_at: Date;
   updated_at?: Date;
@@ -19,10 +25,10 @@ export type Post = {
 /**
  * Get all posts from the database.
  */
-async function getAllPosts() {
-  // TODO - this should be a published_date, not created_at.
-  const res =
-    await sql`SELECT * from posts WHERE is_draft = FALSE ORDER BY created_at DESC`;
+async function getAllPosts(hideDrafts: boolean) {
+  const res = hideDrafts
+    ? await sql`SELECT * from posts WHERE is_draft = FALSE ORDER BY COALESCE(published_at, created_at) DESC`
+    : await sql`SELECT * from posts ORDER BY COALESCE(published_at, created_at) DESC`;
   return res.rows as Post[];
 }
 
@@ -30,9 +36,8 @@ async function getAllPosts() {
  * Get the most recent post from the database.
  */
 async function getMostRecentPost() {
-  // TODO - this should be a published_date, not created_at.
   const res =
-    await sql`SELECT * from posts WHERE is_draft = FALSE ORDER BY created_at DESC LIMIT 1`;
+    await sql`SELECT * from posts WHERE is_draft = FALSE ORDER BY published_at DESC LIMIT 1`;
   return res.rows[0] as Post;
 }
 
@@ -47,16 +52,8 @@ async function getPost(id: number) {
 /**
  * Create a new post.
  */
-async function createPost(
-  title: string,
-  body: string,
-  synopsis: string,
-  tags: string,
-  hero_url: string,
-  blurred_hero_data_url: string,
-) {
-  const resp =
-    await sql`INSERT INTO posts (title, body, synopsis, tags, hero_url, blurred_hero_data_url) VALUES (${title}, ${body}, ${synopsis}, ${tags}, ${hero_url}, ${blurred_hero_data_url}) RETURNING id`;
+async function createPost() {
+  const resp = await sql`INSERT INTO posts DEFAULT VALUES RETURNING id`;
 
   if (resp.rowCount < 1) throw new Error('Failed to create post');
 
@@ -76,12 +73,12 @@ async function editPost(
   blurred_hero_data_url: string,
 ) {
   const resp = await sql`UPDATE posts SET 
-       title = ${title},
-       body = ${body},
-       synopsis = ${synopsis},
-       tags = ${tags},
-       hero_url = ${hero_url},
-       blurred_hero_data_url = ${blurred_hero_data_url},
+       draft_title = ${title},
+       draft_body = ${body},
+       draft_synopsis = ${synopsis},
+       draft_tags = ${tags},
+       draft_hero_url = ${hero_url},
+       draft_blurred_hero_data_url = ${blurred_hero_data_url},
        updated_at = NOW() 
      WHERE id = ${id}`;
 
@@ -92,8 +89,16 @@ async function editPost(
  * Publish a post by its id.
  */
 async function publishPost(id: number) {
-  const resp =
-    await sql`UPDATE posts SET is_draft = FALSE, published_at = NOW() WHERE id = ${id}`;
+  const resp = await sql`UPDATE posts 
+      SET title = draft_title, 
+          synopsis = draft_synopsis,
+          tags = draft_tags,
+          body = draft_body,
+          hero_url = draft_hero_url,
+          draft_blurred_hero_data_url = draft_blurred_hero_data_url,
+          is_draft = FALSE, 
+          published_at = NOW() 
+    WHERE id = ${id}`;
 
   if (resp.rowCount < 1) throw new Error('Failed to publish post');
 }
